version: '3.8'

# Coolify-optimized Docker Compose for Business Scraper
# This configuration is specifically designed for Coolify deployment

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: business-scraper-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: business_scraper
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/business_scraper --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - business-scraper

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: business-scraper-backend
    restart: unless-stopped
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/business_scraper
      - PYTHONUNBUFFERED=1
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - business-scraper

  # Frontend (Main service for Coolify)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - REACT_APP_API_URL=/api
    container_name: business-scraper-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - business-scraper
    # Coolify labels for proper identification
    labels:
      - "coolify.managed=true"
      - "coolify.version=1.0"
      - "coolify.type=application"

volumes:
  mongodb_data:
    driver: local

networks:
  business-scraper:
    driver: bridge

# Coolify-specific configurations
x-coolify:
  # Main service that Coolify will expose
  main_service: frontend
  # Health check configuration
  health_check:
    enabled: true
    path: "/"
    port: 80
  # Auto-deployment settings
  auto_deploy:
    enabled: true
    branch: main
